openapi: 3.0.0
info:
  title: Admin as a Service (AaaS)
  version: '1.0'
  description: This API connects to the accounting module of Digis. Provides all admin backend from incoming assets to accounting
  contact:
    name: Johan Boissard
    email: johan@nexys.ch
    url: 'https://nexys.ch'
  license:
    name: MIT
    url: 'https://opensource.org/license/mit/'
servers:
  - url: 'https://app.digis.ch/api'
paths:
  '/accounting/account/{date}/listUntil':
    post:
      summary: Entry list for a selected account until xxx-xx-xx
      tags:
        - accounting
      responses:
        '200':
          description: OK
      operationId: get-accounting-account-2018-12-31-listUntil
      description: 'same as `/account/list` but returns only until a given date. The date parameter is in the url and must be given in the ISO standard, e.g. 2019-10-30'
    parameters:
      - schema:
          type: string
        name: date
        in: path
        required: true
  /accounting/account/list:
    post:
      summary: Account list
      tags:
        - accounting
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
              examples: {}
      operationId: get-accounting-account-list
      description: get the list of accounts and their balance
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
  /accounting/entry/list:
    post:
      summary: Entry list
      tags:
        - accounting
      responses:
        '200':
          description: OK
      operationId: get-accounting-entry-list
      description: returns all the entries in chronological order
  '/accounting/account/{accountId}/detail':
    post:
      summary: Account detail
      tags:
        - accounting
      operationId: 'get-accounting-account-:accountId-detail'
      description: lists the details of a chosen account. The id is always numerical.
      responses:
        '200':
          description: OK
    parameters:
      - schema:
          type: integer
        name: accountId
        in: path
        required: true
  '/accounting/entry/{accountId}/list':
    post:
      summary: Entry list for a selected account
      tags:
        - accounting
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entry'
      operationId: 'get-accounting-entry-:accountId-list'
      description: list of entries for the selected account.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
          application/xml:
            schema:
              type: object
              properties: {}
    parameters:
      - schema:
          type: integer
        name: accountId
        in: path
        description: account Id
        required: true
  /accounting/entry/insert:
    post:
      tags:
        - accounting
      summary: Entry insert
      operationId: post-accounting-entry-insert
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      description: Creates a new entry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntryInput'
  '/accounting/entry/{entryId}/update':
    post:
      tags:
        - accounting
      description: Updates an existing entry
      summary: Entry Update
      operationId: post-accounting-entry-930-update
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntryInput'
    parameters:
      - schema:
          type: integer
        name: entryId
        in: path
        required: true
  /accounting/account/insert:
    post:
      tags:
        - accounting
      description: add a new account
      summary: ''
      operationId: post-accounting-account-insert
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountInput'
  '/accounting/account/{accountId}/update':
    post:
      description: updates an account
      tags:
        - accounting
      operationId: post-accounting-account-update
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountInput'
        description: ''
    parameters:
      - schema:
          type: integer
        name: accountId
        in: path
        required: true
  /company/list:
    post:
      description: fetches list of companies
      tags:
        - company
        - accounting
      summary: get list of companies
      operationId: post-company-list
      responses:
        '200':
          description: OK
  /company/detail:
    post:
      description: fetches list of companies
      tags:
        - company
      summary: get company
      operationId: get-company
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
              required:
                - uuid
  /company/insert:
    post:
      description: insert company
      tags:
        - company
      summary: Insert a company
      operationId: insert-company
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  required:
                    - name
                  properties:
                    name:
                      type: string
              required:
                - data
            examples:
              Example 1:
                value:
                  data:
                    name: my company
  /company/update:
    post:
      description: update company
      tags:
        - company
      summary: update company
      operationId: update-company
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  required:
                    - name
                  properties:
                    name:
                      type: string
                uuid:
                  type: string
              required:
                - data
                - uuid
  /company/delete:
    post:
      description: delete company
      tags:
        - company
      summary: delete company
      operationId: delete-company
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
              required:
                - data
                - uuid
  /company/address/list:
    post:
      description: fetches list of address for a company
      tags:
        - company
      summary: get list of companty addresses
      operationId: company-address-list
      responses:
        '200':
          description: OK
  /company/address/detail:
    post:
      description: list company address
      tags:
        - company
      summary: get company address
      operationId: get-company-address
      responses:
        '200':
          description: OK
      requestBody:
        $ref: '#/components/requestBodies/Uuid'
  /address/insert:
    post:
      description: |-
        insert an address. The address must be linked to a company.

        Note that the ids of countries are the following:
        1: Switzerland
        (2: France)

        For now, only Switzerland is fully supported.
      tags:
        - company
        - address
      summary: Insert an Address
      operationId: insert-company-address
      responses:
        '200':
          $ref: '#/components/responses/id'
      x-internal: false
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    street:
                      type: string
                    city:
                      type: string
                    zip:
                      type: string
                    country:
                      type: object
                      properties:
                        id:
                          type: integer
                    company:
                      type: object
                      properties:
                        uuid:
                          type: string
              x-examples:
                Example 1:
                  data:
                    street: rue des cerises 23
                    city: Montreux
                    zip: '1234'
                    country:
                      id: 1
                    company:
                      uuid: 1521d11d-fd45-11ed-82d4-42010aac0013
      security:
        - Authorization: []
      parameters: []
    parameters: []
  /company/address/update:
    post:
      description: update company address
      tags:
        - company
      summary: update company address
      operationId: update-company-address
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  required:
                    - name
                  properties:
                    name:
                      type: string
                uuid:
                  type: string
              required:
                - data
                - uuid
  /company/address/delete:
    post:
      description: delete company address
      tags:
        - company
      summary: delete company address
      operationId: delete-company-address
      responses:
        '200':
          description: OK
      requestBody:
        $ref: '#/components/requestBodies/Uuid'
  /invoice/list:
    post:
      tags:
        - invoice
      description: list of invoices
      summary: Invoices List
      operationId: post-invoice-list
      responses:
        '200':
          description: OK
  /invoice/detail:
    post:
      tags:
        - invoice
      summary: Invoice detail
      description: invoice detail
      operationId: post-invoice-detail
      responses:
        '200':
          $ref: '#/components/responses/Invoice'
      requestBody:
        $ref: '#/components/requestBodies/Uuid'
  /invoice/update:
    post:
      tags:
        - invoice
      summary: Update invoice
      description: update invoice
      operationId: post-invoice-update
      responses:
        '200':
          description: OK
  /invoice/delete:
    post:
      tags:
        - invoice
      summary: Invoice Delete
      description: delete invoice
      operationId: post-invoice-delete
      responses:
        '200':
          description: OK
      requestBody:
        $ref: '#/components/requestBodies/Uuid'
  /invoice/insert:
    post:
      tags:
        - invoice
      summary: Invoice insert
      description: insert invoice
      operationId: post-invoice-insert
      responses:
        '200':
          description: OK
      requestBody:
        $ref: '#/components/requestBodies/Invoice'
  /invoice/item/list:
    post:
      summary: Invoice item list
      operationId: post-invoice-item-list
      responses:
        '200':
          description: OK
      description: invoice item list
      requestBody:
        $ref: '#/components/requestBodies/Uuid'
      tags:
        - invoice
  /invoice/item/detail:
    post:
      summary: Invoice item detail
      operationId: post-invoice-item-detail
      responses:
        '200':
          description: OK
      description: Invoive item detail
      requestBody:
        $ref: '#/components/requestBodies/Uuid'
      tags:
        - invoice
  /invoice/item/insert:
    post:
      description: invoice item insert
      summary: Invoice item insert
      operationId: post-invoice-item-insert
      responses:
        '200':
          description: OK
      tags:
        - invoice
  /invoice/item/update:
    post:
      summary: Invoice item update
      operationId: post-invoice-item-update
      responses:
        '200':
          description: OK
      description: Invoice item update
      tags:
        - invoice
  /invoice/item/delete:
    post:
      summary: Invoice item delete
      operationId: post-invoice-item-delete
      responses:
        '200':
          description: OK
      description: Invoice item delete
      requestBody:
        $ref: '#/components/requestBodies/Uuid'
      tags:
        - invoice
  /payment-profile/list:
    post:
      summary: Payment Profile list
      operationId: post-payment-profile-list
      responses:
        '200':
          description: OK
      description: Payment Profile list
      tags:
        - payment profile
      requestBody:
        $ref: '#/components/requestBodies/Uuid'
  /payment-profile/detail:
    post:
      summary: Payment Profile detail
      operationId: post-payment-profile-detail
      responses:
        '200':
          description: OK
      description: Payment Profile detail
      tags:
        - payment profile
      requestBody:
        $ref: '#/components/requestBodies/Uuid'
  /payment-profile/insert:
    post:
      summary: Payment Profile insert
      operationId: post-payment-profile-insert
      responses:
        '200':
          description: OK
      description: Payment Profile insert
      tags:
        - payment profile
      requestBody:
        $ref: '#/components/requestBodies/Payment-Profile'
  /payment-profile/archive:
    post:
      summary: Payment Profile archive
      operationId: post-payment-archive-delete
      responses:
        '200':
          description: OK
      description: Payment Profile archive
      tags:
        - payment profile
      requestBody:
        $ref: '#/components/requestBodies/Uuid'
  /payment-profile/delete:
    post:
      summary: Payment Profile delete
      operationId: post-payment-profile-delete
      responses:
        '200':
          description: OK
      description: Payment Profile delete
      tags:
        - payment profile
      requestBody:
        $ref: '#/components/requestBodies/Uuid'
  /file/serve:
    post:
      summary: File Serve
      operationId: post-file-serve
      responses:
        '200':
          description: OK
      description: Serve file
      tags:
        - file
  /file/upload:
    post:
      summary: File Upload
      operationId: post-file-upload
      responses:
        '200':
          description: OK
      description: Upload a new file
      tags:
        - file
  /mail/insert:
    post:
      summary: Mail Insert
      operationId: post-mail-insert
      responses:
        '200':
          description: OK
      tags:
        - mail
      description: Insert a new mail item
  /mail/list:
    post:
      summary: Mail List
      tags:
        - mail
      operationId: get-mail-list
      description: list of mails
      responses:
        '200':
          description: OK
  /mail/archive:
    post:
      summary: Mail Archive
      operationId: post-mail-archive
      responses:
        '200':
          description: OK
      description: Set mail to archive and link entities
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                company:
                  type: object
                  required:
                    - uuid
                  properties:
                    uuid:
                      type: string
              required:
                - company
      tags:
        - mail
  /mail/toPayable:
    post:
      summary: Mail to Payable
      operationId: post-mail-toPayable
      responses:
        '200':
          description: OK
      description: moves mail to "processed" and create payable (and execute payment)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                company:
                  type: object
                  required:
                    - uuid
                    - paymentProfile
                  properties:
                    uuid:
                      type: string
                    paymentProfile:
                      type: object
                      required:
                        - iban
                      properties:
                        iban:
                          type: string
                          description: 'iban of the payment, this can either be a qr iban or regular'
                        bic:
                          type: string
                        referenceNumber:
                          type: string
                bankAccount:
                  type: object
                  required:
                    - uuid
                  properties:
                    uuid:
                      type: string
              required:
                - company
                - bankAccount
      tags:
        - mail
  /mail/statusChange:
    post:
      summary: Mail Status Change
      operationId: post-mail-statusChange
      responses:
        '200':
          description: OK
      description: Change the status of a mail. Beware not all possibilities are possible since there are business rules that will prevent some actions
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  description: uuid of the mail
                status:
                  type: integer
              required:
                - uuid
                - status
      tags:
        - mail
  /auth/login:
    post:
      summary: Login
      operationId: post-auth-login
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                instance:
                  type: object
                  required:
                    - uuid
                  properties:
                    uuid:
                      type: string
                username:
                  type: string
                password:
                  type: string
              required:
                - instance
                - username
                - password
        description: 'login via username and password: should favor oauth'
      tags:
        - auth
      description: login user the standard way
  /auth/signup:
    post:
      summary: Signup
      operationId: post-auth-signup
      responses:
        '200':
          description: OK
      description: |-
        User signup
        Note: this is a standard signup, oauth/sso should be favored
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                instance:
                  type: object
                  required:
                    - name
                    - uuid
                  properties:
                    name:
                      type: string
                    uuid:
                      type: string
                username:
                  type: string
                password:
                  type: string
              required:
                - instance
                - username
                - password
  /user/invite:
    post:
      summary: User Invite
      operationId: post-user-invite
      responses:
        '200':
          description: OK
      description: Invite a new user to the instance
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                permissions:
                  type: array
                  description: pass the list of permissions the new user is granted with
                  items:
                    type: integer
              required:
                - email
                - permissions
  /user/invitation/accept:
    post:
      tags:
        - auth
      summary: User Invitation Accept
      operationId: post-user-invitation-accept
      responses:
        '200':
          description: OK
      description: when new user signs up via invitation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  type: string
                user:
                  type: object
                  properties:
                    uuid:
                      type: string
                '':
                  type: string
  /user/list:
    post:
      tags:
        - auth
      summary: User list
      operationId: post-user-list
      responses:
        '200':
          description: OK
      description: List of user
  /auth/logout:
    get:
      summary: logout
      tags:
        - auth
      responses:
        '200':
          description: OK
      operationId: get-auth-logout
      description: 'log out user, and revoke token'
components:
  schemas:
    Account:
      title: Account
      type: object
      description: Main account entity
      properties:
        id:
          type: string
        name:
          type: string
        number:
          type: number
        accountType:
          type: object
          properties:
            name:
              type: string
        currency:
          type: object
          properties:
            name:
              type: string
        total:
          type: number
        nTransactions:
          type: integer
    Entry:
      title: Entry
      type: object
      properties:
        id:
          type: integer
        entryId:
          type: integer
        number:
          type: string
        direction:
          type: string
        description:
          type: string
        date:
          type: string
        currency:
          type: object
        account:
          type: object
        total:
          type: number
        csum:
          type: number
          description: the amount in the parent account until this transaction
        entity:
          type: object
    EntryInput:
      title: EntryInput
      type: object
      properties:
        date:
          type: string
        credit:
          type: array
          items:
            type: object
            properties:
              amount:
                type: number
              accountId:
                type: integer
        debit:
          type: array
          items:
            type: object
            properties:
              amount:
                type: number
              accountId:
                type: integer
        name:
          type: string
    AccountInput:
      title: AccountInput
      type: object
      properties:
        currency:
          type: object
          properties:
            id:
              type: number
        accountType:
          type: object
          properties:
            id:
              type: number
        name:
          type: string
        number:
          type: string
  securitySchemes:
    Authorization:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: ''
          tokenUrl: ''
          refreshUrl: ''
          scopes: {}
  requestBodies:
    Address:
      content:
        application/json:
          schema:
            type: object
            properties:
              street:
                type: string
              city:
                type: string
              zip:
                type: string
              country:
                type: string
      description: ''
    Uuid:
      content:
        application/json:
          schema:
            type: object
            properties:
              uuid:
                type: string
                description: UUID
            required:
              - uuid
      description: filter by UUID
    Invoice:
      content:
        application/json:
          schema:
            type: object
            properties:
              company:
                type: object
                required:
                  - uuid
                  - name
                properties:
                  uuid:
                    type: string
                  name:
                    type: string
              vat:
                type: number
              address:
                type: object
                properties:
                  id:
                    type: number
                  body:
                    type: object
                    properties:
                      street:
                        type: string
                      zip:
                        type: string
                      city:
                        type: string
                    required:
                      - street
                      - zip
                      - city
            required:
              - company
              - vat
              - address
      description: invoice insert
    Payment-Profile:
      content:
        application/json:
          schema:
            type: object
            properties:
              type:
                type: number
              company:
                type: object
                properties:
                  uuid:
                    type: string
                required:
                  - uuid
              account:
                type: object
                properties:
                  id:
                    type: number
                required:
                  - id
              referenceNumber:
                type: string
            required:
              - type
  parameters: {}
  responses:
    Invoice:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
              amount:
                type: number
    id:
      description: Return id of created object
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: integer
            x-examples:
              Example 1:
                id: 449
        application/xml:
          schema:
            type: object
            properties:
              id:
                type: integer
            x-examples:
              Example 1:
                id: 449
tags:
  - name: user
  - name: auth
  - name: accounting
  - name: invoice
  - name: file
  - name: company
  - name: payment profile
  - name: mail
  - name: address
security:
  - Authorization: []
